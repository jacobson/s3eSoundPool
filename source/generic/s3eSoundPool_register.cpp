/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "s3eSoundPool_autodefs.h"
#include "s3eEdk.h"
#include "s3eSoundPool.h"
//Declarations of Init and Term functions
extern s3eResult s3eSoundPoolInit();
extern void s3eSoundPoolTerminate();


const char* s3eSoundPoolGetErrorString()
{
#ifdef S3E_STORE_ERROR_STRINGS
    return s3eEdkErrorGetString(S3E_EXT_SOUNDPOOL_HASH);
#else
    return NULL;
#endif
}

s3eSoundPoolError s3eSoundPoolGetError()
{
    return (s3eSoundPoolError) s3eEdkErrorGet(S3E_EXT_SOUNDPOOL_HASH);
}

s3eResult s3eSoundPoolRegister(s3eSoundPoolCallback cbid, s3eCallback fn, void* pData)
{
    return s3eEdkCallbacksRegister(S3E_EXT_SOUNDPOOL_HASH, S3E_SOUNDPOOL_CALLBACK_MAX, cbid, fn, pData, 0);
};

s3eResult s3eSoundPoolUnRegister(s3eSoundPoolCallback cbid, s3eCallback fn)
{
    return s3eEdkCallbacksUnRegister(S3E_EXT_SOUNDPOOL_HASH, S3E_SOUNDPOOL_CALLBACK_MAX, cbid, fn);
}

void s3eSoundPoolRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[17];
    funcPtrs[0] = (void*)s3eSoundPoolRegister;
    funcPtrs[1] = (void*)s3eSoundPoolUnRegister;
    funcPtrs[2] = (void*)s3eSoundPoolGetErrorString;
    funcPtrs[3] = (void*)s3eSoundPoolGetError;
    funcPtrs[4] = (void*)s3eSoundPoolGetInt;
    funcPtrs[5] = (void*)s3eSoundPoolSetInt;
    funcPtrs[6] = (void*)s3eSoundPoolPauseAllSamples;
    funcPtrs[7] = (void*)s3eSoundPoolResumeAllSamples;
    funcPtrs[8] = (void*)s3eSoundPoolStopAllSamples;
    funcPtrs[9] = (void*)s3eSoundPoolSampleLoad;
    funcPtrs[10] = (void*)s3eSoundPoolSampleUnload;
    funcPtrs[11] = (void*)s3eSoundPoolSamplePlay;
    funcPtrs[12] = (void*)s3eSoundPoolSampleStop;
    funcPtrs[13] = (void*)s3eSoundPoolSamplePause;
    funcPtrs[14] = (void*)s3eSoundPoolSampleResume;
    funcPtrs[15] = (void*)s3eSoundPoolSampleGetInt;
    funcPtrs[16] = (void*)s3eSoundPoolSampleSetInt;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[17] = { 0 };

    /*
     * Register the extension
     */
    s3eEdkRegister("s3eSoundPool", funcPtrs, sizeof(funcPtrs), flags, s3eSoundPoolInit, s3eSoundPoolTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int s3eSoundPoolStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&s3eSoundPoolRegisterExt;
    return 0;
}

int g_s3eSoundPoolVal = s3eSoundPoolStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    s3eSoundPoolRegisterExt();
}
#endif

#endif
